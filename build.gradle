// To Run Docker inside Jenkins (To Run Docker inside Jenkins Docker container)
import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

plugins {
  id 'base'
  id 'com.palantir.docker' version '0.29.0'
  id 'com.palantir.docker-run' version '0.29.0'
  id 'pl.allegro.tech.build.axion-release' version '1.13.3'
}

project.version = scmVersion.version

// To Run Docker inside Jenkins (To Run Docker inside Jenkins Docker container)
// Jenkins builds micro-service docker image push to DockerHub
Process process
if (DefaultNativePlatform.getCurrentOperatingSystem().isWindows()) {
    process = "docker run --rm -v /var/run/docker.sock:/var/run/docker.sock alpine stat -c %g /var/run/docker.sock".execute()
} else if (DefaultNativePlatform.getCurrentOperatingSystem().isLinux()) {
    process = "stat -c %g /var/run/docker.sock".execute()
} else {
    throw new GradleException("Unsupported operating system. No way to find group of /var/run/docker.sock.")
}

def out = new ByteArrayOutputStream()
process.waitForProcessOutput(out, System.err)
String dockerSockGroupId = out.toString().trim()
String extraPrefix = DefaultNativePlatform.getCurrentOperatingSystem().isWindows() ? '/' : ''
// end


docker {
  name "${project.name}:${project.version}"
  files "plugins.txt", "seedJob.xml"
}

dockerRun {
  name "${project.name}"
  image "${project.name}:${project.version}"
  ports '8001:8080'
  clean true
  daemonize false
  // arguments '--hostname=custom', '-P'
  // volumes 'hostvolume': '/containervolume'
  // env 'MYVAR1': 'MYVALUE1', 'MYVAR2': 'MYVALUE2'

  // To Run Docker inside Jenkins (To Run Docker inside Jenkins Docker container)
  arguments '-v', "$extraPrefix/var/run/docker.sock:/var/run/docker.sock", '--group-add', dockerSockGroupId
}
